@{
    ViewData["Title"] = "ScreencapDemo";
}

@section PreLoaded{
    <script type="text/javascript" src="~/lib/knockout/dist/knockout.js"></script>
}


<div class="row">
    <div class="card page-heading col-lg-10 col-md-10 col-sm-12 col-xs-12 col-lg-offset-1 col-md-offset-1">
        <h2 class="text-center"><b>@ViewData["Title"]</b></h2>
    </div>
</div>


<div class="row">
    <div class="col s6">
        <video autoplay></video>
    </div>
    <div class="col s6">
        <canvas></canvas>
    </div>
</div>
<br />

@section Scripts {
    @{ await Html.RenderPartialAsync("ProcessStreamViewModel"); }
    <script>
        
        function mockPost() {
            vm.disableSendingOfFrames(true);

        }

        function getBase64StringFromVideo() {
            var video = $('video')[0];
            if (video.clientHeight == 320) return;
            //var canvas = $('canvas')[0];
            var canvas = document.createElement('canvas');
            var canvasContext = canvas.getContext('2d');

            canvas.width = video.clientWidth;
            canvas.height = video.clientHeight;
            canvas.fillStyle = 'red';

            var expectedDim = 384;
            var offsetX = (video.clientWidth - video.clientHeight) / 2;

            canvas.width = expectedDim;
            canvas.height = expectedDim;
            canvasContext.drawImage(
                video, offsetX, 0, video.clientHeight, video.clientHeight,
                0, 0, expectedDim, expectedDim
            );


            var imageJpeg = canvas.toDataURL('image/jpeg').split(',')[1];
            vm.addFrameToQueue(imageJpeg);

            if ((vm.framesToSend().length == vm.batchSize())) {
                vm.disableSendingOfFrames(true);
                vm.sendFramesToBeProcessed();

            }
            canvas.remove();

        }




        function handleSuccessFact(video) {
                return function(stream) {
                        window.stream = stream;
                        video.srcObject = stream;
                }
        }

        function handleError(error, video) {
                console.log('navigator.getUserMedia error: ', error);
        }

        $(document).ready(function() {
                var video = $('video')[0];
                var constraints = {
                        audio: false,
                        video: true
                };

                navigator.mediaDevices.getUserMedia(constraints)
                        .then(handleSuccessFact(video))
                    .catch(handleError);


                setInterval(getBase64StringFromVideo, 100);
        });
    </script>
}