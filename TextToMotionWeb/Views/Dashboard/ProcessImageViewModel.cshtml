<script>
    var EXPECTED_DIM = 384;
    var joint_position_url = 'https://brendanduke.ca:8765/';
    var heatmap_url = 'https://brendanduke.ca:8765/heatmap';



    function elemByID(id) { return document.getElementById(id); }

    var ProcessImageVM = function () {
        var self = this;

        self.pageLoaded = ko.observable(false);

        self.showEmptyBaseImage = ko.observable(true);
        self.showSpinnerForBaseImage = ko.observable(false);
        self.showBaseImage = ko.observable(false);
        self.originalImageData = ko.observable('');

        self.showProcessBtn = ko.observable(false);
        self.batchSize = ko.observable(16);

        self.showEmptyProcessedImage = ko.observable(true);
        self.showSpinnerWhileProcessingImage = ko.observable(false);
        self.showProcessedImage = ko.observable(false);
        self.jointPositions = ko.observable('');

        self.showSaveBtn = ko.observable(false);



        self.showValidResultForBaseState = function () {
            self.showSpinnerForBaseImage(false);
            self.showEmptyBaseImage(false);
            self.showBaseImage(true);
            self.showProcessBtn(true);
            self.showSaveBtn(false);
        }

        self.showInvalidResultForBaseState = function(){
            self.showSpinnerForBaseImage(false);
            self.showEmptyBaseImage(true);
            self.showBaseImage(false);
            self.showProcessBtn(false);
            self.showSaveBtn(false);
        }

        self.showValidResultForProcessedState = function () {
            self.showSpinnerWhileProcessingImage(false);
            self.showEmptyProcessedImage(false);
            self.showProcessedImage(true);
            self.showProcessBtn(false);
            self.showSaveBtn(true);
        }

        self.showInvalidResultForProcessedState = function () {
            self.showSpinnerWhileProcessingImage(false);
            self.showEmptyProcessedImage(true);
            self.showProcessedImage(false);
            self.showProcessBtn(true);
            self.showSaveBtn(true);

        }




        self.fillCanvasParams = function (canvas, width, height) {
            canvas.fillStyle = 'red';
            canvas.width = width;
            canvas.height = height;
            var canvasCtx = canvas.getContext('2d');

            return { 'canvas': canvas, 'canvasCtx': canvasCtx };
        }

        self.createCanvas = function (width, height) {
            var canvas = document.createElement('canvas');
            return self.fillCanvasParams(canvas, width, height);
        }






    }
    //custom bindings and helper funcs 
    ko.bindingHandlers.fadeVisible = {
        init: function (element, valueAccessor) {
            // Initially set the element to be instantly visible/hidden depending on the value
            var value = valueAccessor();
            $(element).toggle(ko.utils.unwrapObservable(value)); // Use "unwrapObservable" so we can handle values that may or may not be observable
        },
        update: function (element, valueAccessor) {
            // Whenever the value subsequently changes, slowly fade the element in or out
            var value = valueAccessor();
            ko.utils.unwrapObservable(value) ? $(element).fadeIn() : $(element).hide();
        }
    };

    ko.bindingHandlers.fadeVisibleAlt = {
        init: function (element, valueAccessor) {
            // Initially set the element to be instantly visible/hidden depending on the value
            var value = valueAccessor();
            $(element).toggle(ko.utils.unwrapObservable(value)); // Use "unwrapObservable" so we can handle values that may or may not be observable
        },
        update: function (element, valueAccessor) {
            // Whenever the value subsequently changes, slowly fade the element in or out
            var value = valueAccessor();
            ko.utils.unwrapObservable(value) ? $(element).show() : $(element).hide();
        }
    }
    //init ko vm
    window.vm = new ProcessImageVM();
    ko.applyBindings(vm);




    function showPage() {
        vm.pageLoaded(true);
        $('#page-content').fadeIn();
    }


    function loadBaseImageViaUpload() {
        if (this != null && this.files && this.files[0]) {
            vm.showSpinnerForBaseImage(true);

            var reader = new FileReader();
            reader.onload = function (e) {
                $('#image-preview').attr('src', e.target.result).load(function () {
                    vm.showValidResultForBaseState();
                }).error(function () {
                    vm.showInvalidResultForBaseState();
                });
            };
            reader.readAsDataURL(this.files[0]);
        }
        else vm.showInvalidResultForBaseState();
    }







    function renderHeatmapOverImage(base64Heatmap) {
        var heatmapCanvas = vm.createCanvas(EXPECTED_DIM, EXPECTED_DIM);
        
        var heatmapImage = new Image();
        heatmapImage.onload = function () {
            heatmapCanvas.canvasCtx.drawImage(this, 0, 0, EXPECTED_DIM, EXPECTED_DIM, 0, 0, EXPECTED_DIM, EXPECTED_DIM);

            var heatmapImageData = heatmapCanvas.canvasCtx.getImageData(0, 0, EXPECTED_DIM, EXPECTED_DIM);
            var originalImageData = vm.originalImageData().data;

            var heatmapData = heatmapImageData.data;
            for (var n = 0; n < (4 * EXPECTED_DIM * EXPECTED_DIM); n += 4) {
                heatmapData[n + 0] = 0.5 * heatmapData[n + 0] + 0.5 * originalImageData[n + 0];
                heatmapData[n + 1] = 0.5 * heatmapData[n + 1] + 0.5 * originalImageData[n + 1];
                heatmapData[n + 2] = 0.5 * heatmapData[n + 2] + 0.5 * originalImageData[n + 2];
            }

            canvasToDisplay = elemByID('processed-image');
            canvasToDisplay.width = EXPECTED_DIM; canvasToDisplay.height = EXPECTED_DIM;
            canvasToDisplayCtx = canvasToDisplay.getContext('2d');

            canvasToDisplayCtx.putImageData(heatmapImageData, 0, 0);
            canvasToDisplayCtx.drawImage(canvasToDisplay, 0, 0);

            vm.showValidResultForProcessedState();
        }

        heatmapImage.src = base64Heatmap;

    }

    

    function sendImageToBeProcessed(postData) {
        //get joints -> used to save
        $.post(joint_position_url,
            JSON.stringify(postData),
            function (response) {
                var jointPositions = response;
                //console.log(response);
            },
            "json")
            .fail(function (response) {
                vm.showInvalidResultForProcessedState();
            });

        //get heatmap -> used for display
        $.post(heatmap_url,
            JSON.stringify(postData),
            function (base64Heatmap) {
                renderHeatmapOverImage('data:image/jpeg;base64,' + base64Heatmap);
            })
            .fail(function (response) {
                console.log(response);
                vm.showInvalidResultForProcessedState();
            });
    }





    function processBaseImage() {
        vm.showEmptyProcessedImage(false);
        vm.showProcessedImage(false);
        vm.showSpinnerWhileProcessingImage(true);

        var originalImageCanvas = vm.createCanvas(EXPECTED_DIM, EXPECTED_DIM);
        var bigImageCanvas = vm.createCanvas(EXPECTED_DIM, vm.batchSize() * EXPECTED_DIM);

        originalImage = new Image();
        originalImage.onload = function () {
            originalImageCanvas.canvasCtx.drawImage(originalImage, 0, 0, originalImage.width, originalImage.height,
                0, 0, EXPECTED_DIM, EXPECTED_DIM
            );

            vm.originalImageData(originalImageCanvas.canvasCtx.getImageData(0, 0, EXPECTED_DIM, EXPECTED_DIM));

            for (var i = 0; i < vm.batchSize(); i++) {
                bigImageCanvas.canvasCtx.putImageData(vm.originalImageData(), 0, i * EXPECTED_DIM);
            }
            sendImageToBeProcessed(bigImageCanvas.canvas.toDataURL('image/jpeg').split(',')[1]);
        }

        originalImage.src = $('#image-preview').attr('src');

        originalImageCanvas.canvas.remove();
        bigImageCanvas.canvas.remove();
        

    }




    $('#image-upload').change(loadBaseImageViaUpload);
    $('#process-image-btn').click(processBaseImage);
    $(document).ready(function () {
        $('.modal').modal();
        setTimeout(showPage, 1200);

        $('#upload-file-path').val('');

        $('.chips').material_chip({
            placeholder: '+Tag'
        });

    });


</script>
